%{
 (* File Project/Parser.fsy
    Parser for HawkFun, a small functional language.
    S. Knepper, 2016-12-08
    C. Hoffman, 2016-12-08
  *)

 open Absyn;
%}

%token INT
%token BOOL
%token HD
%token FN
%token FUN
%token ISE
%token LIST
%token NULL
%token PRINT
%token REC
%token UNIT
%token VAR


%token <string> NAME
%token ELSE END FALSE IF IN LOCAL NOT THEN TRUE
%token <int> NAT
%token PLUS MINUS TIMES DIV
%token EQ NE LT LTEQ
%token LPAR RPAR
%token ARROW DARROW
%token SEMICOL COL DCOL
%token TL EL
%token EOF

%right SEMICOL ARROW                          /* lowest precedence  */
%nonassoc IF
%left ELSE
%left EQ NE 
%nonassoc LT LTEQ
%right DCOL
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HD TL ISE LIST PRINT F          /* highest precedence  */

%start Main
%type <Absyn.expr> Main Expr Const AtExpr AppExpr
%type <Absyn.expr1> 
%type <Absyn.binding> Binding
%type <Absyn.tname> TName
%type <Absyn.htype> Type

%%

Main:
	Expr EOF { $1 }
;

 

Expr:
    AtExpr							                { $1								          }   
  | AppExpr							                { $1							            }
  | IF Expr THEN Expr ELSE Expr		      { (If ($2, $4, $6), AnyT)	    }
  | NOT Expr						                { (Op1 ("not", $2), AnyT)	    }
  | HD Expr							                { (Op1 ("hd", $2), AnyT)	    }
  | TL Expr							                { (Op1 ("tl", $2), AnyT)	    }
  | ISE Expr						                { (Op1 ("ise", $2), AnyT)	    }
  | PRINT Expr						              { (Op1 ("print", $2), AnyT)	  }
  | Expr PLUS  Expr                     { (Op2 ("+",  $1, $3), AnyT)  }
  | Expr MINUS Expr                     { (Op2 ("-",  $1, $3), AnyT)  }
  | Expr TIMES Expr                     { (Op2 ("*",  $1, $3), AnyT)  }
  | Expr DIV   Expr					            { (Op2 ("/",  $1, $3), AnyT)  }
  | Expr EQ    Expr					            { (Op2 ("=",  $1, $3), AnyT)	}
  | Expr NE    Expr					            { (Op2 ("<>", $1, $3), AnyT)	}
  | Expr LT    Expr					            { (Op2 ("<",  $1, $3), AnyT)	}
  | Expr LTEQ  Expr					            { (Op2 ("<=",  $1, $3), AnyT)	}
  | Expr DCOL  Expr					            { (Op2 ("::",  $1, $3), AnyT) }
  | Expr SEMICOL Expr					          { (Op2 (";",  $1, $3), AnyT)  }
;

AtExpr:
  Const                                  { $1                                                   } 
  | NAME						                     { (Var $1, AnyT)						                            }
  | LOCAL Bindings IN Expr END		       { List.foldBack(fun b e -> (Let(b, e), AnyT)) $2 $4    }
  | FN TName DARROW Expr END			       { (Lam($2, $4), ArrowT(AnyT, AnyT))                    }
  | LPAR Expr RPAR					             { $2								                                    }
  | LPAR EL COL Type RPAR			           { (EListC, $4)    				                              }
;

Const:
	NAT								                     { (Con $1, IntT)           }
  | TRUE							                   { (Con 1, BoolT)				    }
  | FALSE							                   { (Con 0, BoolT)         	}
  | NULL							                   { (Con 0, UnitT)			    	}
;

TName: LPAR NAME COL Type RPAR		       { ($2, $4)				          }
;

Bindings:
	Binding							                   { [$1]								      }
  | Binding Bindings				             { $1 :: $2 		 					  }
;

Binding:
	VAR NAME EQ Expr					             { V ($2, $4)				               }
  | FUN NAME TName EQ Expr				       { V ($2, (Lam ($3, $5), AnyT))	   }
  | FUN REC NAME TName COL Type EQ Expr  { F ($3, $4, $6, $8)		           } 								
;

AppExpr:
	AtExpr AtExpr					                 { (Call ($1, $2), AnyT)					 }
  | AppExpr AtExpr					             { (Call ($1, $2), AnyT)					 }
;

Type:
	UNIT							                      { UnitT							       }
  | BOOL                                  { BoolT                    }
  | INT								                    { IntT							       }  
  | Type ARROW Type					              { ArrowT ($1, $3)					 }
  | Type LIST						                  { ListT ($1)						   }
  | LPAR Type RPAR					              { $2								       }
;

