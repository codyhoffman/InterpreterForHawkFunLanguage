// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

 (* File Project/Parser.fsy
    Parser for HawkFun, a small functional language.
    S. Knepper, 2016-12-08
    C. Hoffman, 2016-12-08
  *)

 open Absyn;

# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | TL
  | EL
  | SEMICOL
  | COL
  | DCOL
  | ARROW
  | DARROW
  | LPAR
  | RPAR
  | EQ
  | NE
  | LT
  | LTEQ
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | NAT of (int)
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LOCAL
  | NOT
  | THEN
  | TRUE
  | NAME of (string)
  | VAR
  | UNIT
  | REC
  | PRINT
  | NULL
  | LIST
  | ISE
  | FUN
  | FN
  | HD
  | BOOL
  | INT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TL
    | TOKEN_EL
    | TOKEN_SEMICOL
    | TOKEN_COL
    | TOKEN_DCOL
    | TOKEN_ARROW
    | TOKEN_DARROW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LTEQ
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_NAT
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LOCAL
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_NAME
    | TOKEN_VAR
    | TOKEN_UNIT
    | TOKEN_REC
    | TOKEN_PRINT
    | TOKEN_NULL
    | TOKEN_LIST
    | TOKEN_ISE
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_HD
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_Const
    | NONTERM_TName
    | NONTERM_Bindings
    | NONTERM_Binding
    | NONTERM_AppExpr
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | TL  -> 1 
  | EL  -> 2 
  | SEMICOL  -> 3 
  | COL  -> 4 
  | DCOL  -> 5 
  | ARROW  -> 6 
  | DARROW  -> 7 
  | LPAR  -> 8 
  | RPAR  -> 9 
  | EQ  -> 10 
  | NE  -> 11 
  | LT  -> 12 
  | LTEQ  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | NAT _ -> 18 
  | ELSE  -> 19 
  | END  -> 20 
  | FALSE  -> 21 
  | IF  -> 22 
  | IN  -> 23 
  | LOCAL  -> 24 
  | NOT  -> 25 
  | THEN  -> 26 
  | TRUE  -> 27 
  | NAME _ -> 28 
  | VAR  -> 29 
  | UNIT  -> 30 
  | REC  -> 31 
  | PRINT  -> 32 
  | NULL  -> 33 
  | LIST  -> 34 
  | ISE  -> 35 
  | FUN  -> 36 
  | FN  -> 37 
  | HD  -> 38 
  | BOOL  -> 39 
  | INT  -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_TL 
  | 2 -> TOKEN_EL 
  | 3 -> TOKEN_SEMICOL 
  | 4 -> TOKEN_COL 
  | 5 -> TOKEN_DCOL 
  | 6 -> TOKEN_ARROW 
  | 7 -> TOKEN_DARROW 
  | 8 -> TOKEN_LPAR 
  | 9 -> TOKEN_RPAR 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_NE 
  | 12 -> TOKEN_LT 
  | 13 -> TOKEN_LTEQ 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_NAT 
  | 19 -> TOKEN_ELSE 
  | 20 -> TOKEN_END 
  | 21 -> TOKEN_FALSE 
  | 22 -> TOKEN_IF 
  | 23 -> TOKEN_IN 
  | 24 -> TOKEN_LOCAL 
  | 25 -> TOKEN_NOT 
  | 26 -> TOKEN_THEN 
  | 27 -> TOKEN_TRUE 
  | 28 -> TOKEN_NAME 
  | 29 -> TOKEN_VAR 
  | 30 -> TOKEN_UNIT 
  | 31 -> TOKEN_REC 
  | 32 -> TOKEN_PRINT 
  | 33 -> TOKEN_NULL 
  | 34 -> TOKEN_LIST 
  | 35 -> TOKEN_ISE 
  | 36 -> TOKEN_FUN 
  | 37 -> TOKEN_FN 
  | 38 -> TOKEN_HD 
  | 39 -> TOKEN_BOOL 
  | 40 -> TOKEN_INT 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_AtExpr 
    | 21 -> NONTERM_AtExpr 
    | 22 -> NONTERM_AtExpr 
    | 23 -> NONTERM_AtExpr 
    | 24 -> NONTERM_AtExpr 
    | 25 -> NONTERM_AtExpr 
    | 26 -> NONTERM_Const 
    | 27 -> NONTERM_Const 
    | 28 -> NONTERM_Const 
    | 29 -> NONTERM_Const 
    | 30 -> NONTERM_TName 
    | 31 -> NONTERM_Bindings 
    | 32 -> NONTERM_Bindings 
    | 33 -> NONTERM_Binding 
    | 34 -> NONTERM_Binding 
    | 35 -> NONTERM_Binding 
    | 36 -> NONTERM_AppExpr 
    | 37 -> NONTERM_AppExpr 
    | 38 -> NONTERM_Type 
    | 39 -> NONTERM_Type 
    | 40 -> NONTERM_Type 
    | 41 -> NONTERM_Type 
    | 42 -> NONTERM_Type 
    | 43 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | TL  -> "TL" 
  | EL  -> "EL" 
  | SEMICOL  -> "SEMICOL" 
  | COL  -> "COL" 
  | DCOL  -> "DCOL" 
  | ARROW  -> "ARROW" 
  | DARROW  -> "DARROW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LTEQ  -> "LTEQ" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | NAT _ -> "NAT" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LOCAL  -> "LOCAL" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | NAME _ -> "NAME" 
  | VAR  -> "VAR" 
  | UNIT  -> "UNIT" 
  | REC  -> "REC" 
  | PRINT  -> "PRINT" 
  | NULL  -> "NULL" 
  | LIST  -> "LIST" 
  | ISE  -> "ISE" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | HD  -> "HD" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | TL  -> (null : System.Object) 
  | EL  -> (null : System.Object) 
  | SEMICOL  -> (null : System.Object) 
  | COL  -> (null : System.Object) 
  | DCOL  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTEQ  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | NAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LOCAL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | HD  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 25us; 65535us; 0us; 2us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 25us; 42us; 26us; 43us; 27us; 44us; 28us; 45us; 29us; 46us; 30us; 47us; 31us; 52us; 32us; 56us; 33us; 58us; 34us; 77us; 35us; 81us; 36us; 87us; 37us; 27us; 65535us; 0us; 4us; 4us; 88us; 5us; 89us; 6us; 4us; 8us; 4us; 10us; 4us; 12us; 4us; 14us; 4us; 16us; 4us; 18us; 4us; 20us; 4us; 38us; 4us; 39us; 4us; 40us; 4us; 41us; 4us; 42us; 4us; 43us; 4us; 44us; 4us; 45us; 4us; 46us; 4us; 47us; 4us; 52us; 4us; 56us; 4us; 58us; 4us; 77us; 4us; 81us; 4us; 87us; 4us; 27us; 65535us; 0us; 48us; 4us; 48us; 5us; 48us; 6us; 48us; 8us; 48us; 10us; 48us; 12us; 48us; 14us; 48us; 16us; 48us; 18us; 48us; 20us; 48us; 38us; 48us; 39us; 48us; 40us; 48us; 41us; 48us; 42us; 48us; 43us; 48us; 44us; 48us; 45us; 48us; 46us; 48us; 47us; 48us; 52us; 48us; 56us; 48us; 58us; 48us; 77us; 48us; 81us; 48us; 87us; 48us; 3us; 65535us; 54us; 55us; 79us; 80us; 83us; 84us; 2us; 65535us; 50us; 51us; 73us; 74us; 2us; 65535us; 50us; 73us; 73us; 73us; 25us; 65535us; 0us; 5us; 6us; 5us; 8us; 5us; 10us; 5us; 12us; 5us; 14us; 5us; 16us; 5us; 18us; 5us; 20us; 5us; 38us; 5us; 39us; 5us; 40us; 5us; 41us; 5us; 42us; 5us; 43us; 5us; 44us; 5us; 45us; 5us; 46us; 5us; 47us; 5us; 52us; 5us; 56us; 5us; 58us; 5us; 77us; 5us; 81us; 5us; 87us; 5us; 5us; 65535us; 61us; 62us; 70us; 71us; 85us; 86us; 95us; 93us; 97us; 94us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 29us; 57us; 85us; 89us; 92us; 95us; 121us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 11us; 1us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 1us; 2us; 2us; 36us; 2us; 3us; 37us; 1us; 4us; 11us; 4us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 4us; 11us; 4us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 4us; 11us; 4us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 5us; 11us; 5us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 6us; 11us; 6us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 7us; 11us; 7us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 8us; 11us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 1us; 9us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 22us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 23us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 24us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 33us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 34us; 11us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 35us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 2us; 24us; 25us; 1us; 24us; 1us; 25us; 1us; 25us; 3us; 25us; 41us; 42us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 3us; 30us; 41us; 42us; 1us; 30us; 2us; 31us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 34us; 35us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 3us; 35us; 41us; 42us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 3us; 41us; 41us; 42us; 3us; 41us; 42us; 43us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 43us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 16us; 18us; 21us; 24us; 26us; 38us; 40us; 52us; 54us; 66us; 68us; 80us; 82us; 94us; 96us; 108us; 110us; 122us; 124us; 136us; 148us; 160us; 172us; 184us; 196us; 208us; 220us; 232us; 244us; 256us; 268us; 280us; 292us; 304us; 316us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 371us; 373us; 375us; 377us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 401us; 403us; 406us; 408us; 410us; 412us; 414us; 417us; 419us; 421us; 423us; 425us; 427us; 429us; 431us; 435us; 437us; 439us; 441us; 443us; 445us; 447us; 451us; 455us; 457us; 459us; 461us; |]
let _fsyacc_action_rows = 99
let _fsyacc_actionTableElements = [|14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 49152us; 11us; 32768us; 0us; 3us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 0us; 16385us; 8us; 16386us; 8us; 58us; 18us; 64us; 21us; 66us; 24us; 50us; 27us; 65us; 28us; 49us; 33us; 67us; 37us; 54us; 8us; 16387us; 8us; 58us; 18us; 64us; 21us; 66us; 24us; 50us; 27us; 65us; 28us; 49us; 33us; 67us; 37us; 54us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 11us; 32768us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 26us; 8us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 11us; 32768us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 19us; 10us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 9us; 16388us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16389us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16390us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16391us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16392us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16393us; 2us; 16394us; 16us; 40us; 17us; 41us; 2us; 16395us; 16us; 40us; 17us; 41us; 0us; 16396us; 0us; 16397us; 7us; 16398us; 5us; 46us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 7us; 16399us; 5us; 46us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 7us; 16400us; 5us; 46us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 7us; 16401us; 5us; 46us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 5us; 16402us; 5us; 46us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 10us; 16403us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 11us; 32768us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 20us; 53us; 11us; 32768us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 20us; 57us; 11us; 32768us; 3us; 47us; 5us; 46us; 9us; 59us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 10us; 16417us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 10us; 16418us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 10us; 16419us; 3us; 47us; 5us; 46us; 10us; 42us; 11us; 43us; 12us; 44us; 13us; 45us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16404us; 0us; 16405us; 2us; 32768us; 29us; 75us; 36us; 78us; 1us; 32768us; 23us; 52us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16406us; 1us; 32768us; 8us; 68us; 1us; 32768us; 7us; 56us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16407us; 15us; 32768us; 1us; 16us; 2us; 60us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16408us; 1us; 32768us; 4us; 61us; 4us; 32768us; 8us; 97us; 30us; 90us; 39us; 91us; 40us; 92us; 3us; 32768us; 6us; 95us; 9us; 63us; 34us; 96us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 1us; 32768us; 28us; 69us; 1us; 32768us; 4us; 70us; 4us; 32768us; 8us; 97us; 30us; 90us; 39us; 91us; 40us; 92us; 3us; 32768us; 6us; 95us; 9us; 72us; 34us; 96us; 0us; 16414us; 2us; 16415us; 29us; 75us; 36us; 78us; 0us; 16416us; 1us; 32768us; 28us; 76us; 1us; 32768us; 10us; 77us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 2us; 32768us; 28us; 79us; 31us; 82us; 1us; 32768us; 8us; 68us; 1us; 32768us; 10us; 81us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 1us; 32768us; 28us; 83us; 1us; 32768us; 8us; 68us; 1us; 32768us; 4us; 85us; 4us; 32768us; 8us; 97us; 30us; 90us; 39us; 91us; 40us; 92us; 3us; 32768us; 6us; 95us; 10us; 87us; 34us; 96us; 14us; 32768us; 1us; 16us; 8us; 58us; 18us; 64us; 21us; 66us; 22us; 6us; 24us; 50us; 25us; 12us; 27us; 65us; 28us; 49us; 32us; 20us; 33us; 67us; 35us; 18us; 37us; 54us; 38us; 14us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 2us; 16425us; 6us; 95us; 34us; 96us; 3us; 32768us; 6us; 95us; 9us; 98us; 34us; 96us; 4us; 32768us; 8us; 97us; 30us; 90us; 39us; 91us; 40us; 92us; 0us; 16426us; 4us; 32768us; 8us; 97us; 30us; 90us; 39us; 91us; 40us; 92us; 0us; 16427us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 28us; 29us; 38us; 47us; 62us; 74us; 89us; 101us; 116us; 126us; 141us; 142us; 157us; 158us; 173us; 174us; 189us; 190us; 205us; 206us; 209us; 212us; 213us; 214us; 222us; 230us; 238us; 246us; 252us; 263us; 275us; 287us; 299us; 310us; 321us; 332us; 347us; 362us; 377us; 392us; 407us; 422us; 437us; 452us; 467us; 482us; 483us; 484us; 487us; 489us; 504us; 505us; 507us; 509us; 524us; 525us; 541us; 542us; 544us; 549us; 553us; 554us; 555us; 556us; 557us; 558us; 560us; 562us; 567us; 571us; 572us; 575us; 576us; 578us; 580us; 595us; 598us; 600us; 602us; 617us; 619us; 621us; 623us; 628us; 632us; 647us; 648us; 649us; 650us; 651us; 652us; 655us; 659us; 664us; 665us; 670us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 5us; 5us; 3us; 5us; 1us; 1us; 1us; 1us; 5us; 1us; 2us; 4us; 5us; 8us; 2us; 2us; 1us; 1us; 1us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 16405us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 16410us; 16411us; 16412us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 16421us; 16422us; 16423us; 16424us; 65535us; 65535us; 65535us; 16426us; 65535us; 16427us; |]
let _fsyacc_reductions ()  =    [| 
# 363 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 372 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                 _1 
                   )
# 56 "Parser.fsy"
                 : Absyn.expr));
# 383 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                        _1								          
                   )
# 62 "Parser.fsy"
                 : Absyn.expr));
# 394 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                         _1							            
                   )
# 63 "Parser.fsy"
                 : Absyn.expr));
# 405 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                              (If (_2, _4, _6), AnyT)	    
                   )
# 64 "Parser.fsy"
                 : Absyn.expr));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                         (Op1 ("not", _2), AnyT)	    
                   )
# 65 "Parser.fsy"
                 : Absyn.expr));
# 429 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                         (Op1 ("hd", _2), AnyT)	    
                   )
# 66 "Parser.fsy"
                 : Absyn.expr));
# 440 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                         (Op1 ("tl", _2), AnyT)	    
                   )
# 67 "Parser.fsy"
                 : Absyn.expr));
# 451 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                         (Op1 ("ise", _2), AnyT)	    
                   )
# 68 "Parser.fsy"
                 : Absyn.expr));
# 462 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                         (Op1 ("print", _2), AnyT)	  
                   )
# 69 "Parser.fsy"
                 : Absyn.expr));
# 473 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                               (Op2 ("+",  _1, _3), AnyT)  
                   )
# 70 "Parser.fsy"
                 : Absyn.expr));
# 485 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                               (Op2 ("-",  _1, _3), AnyT)  
                   )
# 71 "Parser.fsy"
                 : Absyn.expr));
# 497 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                               (Op2 ("*",  _1, _3), AnyT)  
                   )
# 72 "Parser.fsy"
                 : Absyn.expr));
# 509 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                           (Op2 ("/",  _1, _3), AnyT)  
                   )
# 73 "Parser.fsy"
                 : Absyn.expr));
# 521 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                           (Op2 ("=",  _1, _3), AnyT)	
                   )
# 74 "Parser.fsy"
                 : Absyn.expr));
# 533 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                           (Op2 ("<>", _1, _3), AnyT)	
                   )
# 75 "Parser.fsy"
                 : Absyn.expr));
# 545 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                           (Op2 ("<",  _1, _3), AnyT)	
                   )
# 76 "Parser.fsy"
                 : Absyn.expr));
# 557 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                           (Op2 ("<=",  _1, _3), AnyT)	
                   )
# 77 "Parser.fsy"
                 : Absyn.expr));
# 569 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                           (Op2 ("::",  _1, _3), AnyT) 
                   )
# 78 "Parser.fsy"
                 : Absyn.expr));
# 581 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                           (Op2 (";",  _1, _3), AnyT)  
                   )
# 79 "Parser.fsy"
                 : Absyn.expr));
# 593 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                                _1                                                   
                   )
# 83 "Parser.fsy"
                 : Absyn.expr));
# 604 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                          (Var _1, AnyT)						                            
                   )
# 84 "Parser.fsy"
                 : Absyn.expr));
# 615 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bindings)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                              List.foldBack(fun b e -> (Let(b, e), AnyT)) _2 _4    
                   )
# 85 "Parser.fsy"
                 : Absyn.expr));
# 627 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                             (Lam(_2, _4), ArrowT(AnyT, AnyT))                    
                   )
# 86 "Parser.fsy"
                 : Absyn.expr));
# 639 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                           _2								                                    
                   )
# 87 "Parser.fsy"
                 : Absyn.expr));
# 650 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                              (EListC, _4)    				                              
                   )
# 88 "Parser.fsy"
                 : Absyn.expr));
# 661 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                        (Con _1, IntT)           
                   )
# 92 "Parser.fsy"
                 : Absyn.expr));
# 672 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                         (Con 1, BoolT)				    
                   )
# 93 "Parser.fsy"
                 : Absyn.expr));
# 682 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                          (Con 0, BoolT)         	
                   )
# 94 "Parser.fsy"
                 : Absyn.expr));
# 692 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                         (Con 0, UnitT)			    	
                   )
# 95 "Parser.fsy"
                 : Absyn.expr));
# 702 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                              (_2, _4)				          
                   )
# 98 "Parser.fsy"
                 : Absyn.tname));
# 714 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.binding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                         [_1]								      
                   )
# 102 "Parser.fsy"
                 : 'Bindings));
# 725 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.binding)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                            _1 :: _2 		 					  
                   )
# 103 "Parser.fsy"
                 : 'Bindings));
# 737 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                          V (_2, _4)				               
                   )
# 107 "Parser.fsy"
                 : Absyn.binding));
# 749 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                            V (_2, (Lam (_3, _5), AnyT))	   
                   )
# 108 "Parser.fsy"
                 : Absyn.binding));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.tname)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                F (_3, _4, _6, _8)		           
                   )
# 109 "Parser.fsy"
                 : Absyn.binding));
# 776 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                           (Call (_1, _2), AnyT)					 
                   )
# 113 "Parser.fsy"
                 : Absyn.expr));
# 788 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                           (Call (_1, _2), AnyT)					 
                   )
# 114 "Parser.fsy"
                 : Absyn.expr));
# 800 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                         UnitT							       
                   )
# 118 "Parser.fsy"
                 : Absyn.htype));
# 810 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                 BoolT                    
                   )
# 119 "Parser.fsy"
                 : Absyn.htype));
# 820 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                          IntT							       
                   )
# 120 "Parser.fsy"
                 : Absyn.htype));
# 830 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                             ArrowT (_1, _3)					 
                   )
# 121 "Parser.fsy"
                 : Absyn.htype));
# 842 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                            ListT (_1)						   
                   )
# 122 "Parser.fsy"
                 : Absyn.htype));
# 853 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.htype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                            _2								       
                   )
# 123 "Parser.fsy"
                 : Absyn.htype));
|]
# 865 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
